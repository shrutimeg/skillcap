public class Main {
    public static void main(String[] args) {
        int[] arr = new int[] {1, 2,22,5,0}; 
        int[] prefixSum = new int[arr.length]; 

        // Calculate prefix sum array
        prefixSum[0] = arr[0]; // First element of prefixSum is the first element of arr
        for (int i = 1; i < arr.length; i++) { // start from 1 because prefixSum[0] is already set
            prefixSum[i] = prefixSum[i - 1] + arr[i];
        }

        int ans = 0, leftSum, midSum, rightSum;

        // Iterate over all possible values for i and j
        for (int i = 0; i < arr.length - 2; i++) {
            for (int j = i + 1; j < arr.length - 1; j++) {
                leftSum = addNumbers(prefixSum, 0, i); // Sum of the left subarray
                midSum = addNumbers(prefixSum, i + 1, j); // Sum of the middle subarray
                rightSum = addNumbers(prefixSum, j + 1, arr.length - 1); // Sum of the right subarray

                // Check if leftSum <= midSum <= rightSum
                if (leftSum <= midSum && midSum <= rightSum) {
                    ans++;
                }
            }
        }

        System.out.println("Number of valid triplets: " + ans);
    }

    // Method to get the sum of elements between indices left and right (inclusive) in the prefixSum array
    private static int addNumbers(int[] prefixSum, int left, int right) {
if (left == 0) {
        return prefixSum[right]; // No subtraction if left is 0
      }
        return prefixSum[right] - prefixSum[left - 1]; // Return sum from left to right
    }
}
